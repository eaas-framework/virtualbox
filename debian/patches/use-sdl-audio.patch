Description: Add support for SDL audio
 Port QEMU's SDL audio output driver into the Audio subsystem.
Author: <thomas@bw-fla.uni-freiburg.de>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v3_2.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v3_2.h
@@ -1661,7 +1661,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v4_2.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v4_2.h
@@ -2312,7 +2312,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v3_1.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v3_1.h
@@ -1647,7 +1647,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v4_0.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v4_0.h
@@ -1910,7 +1910,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v4_1.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v4_1.h
@@ -2102,7 +2102,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v3_0.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v3_0.h
@@ -1740,7 +1740,8 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9,
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/cbinding/VBoxCAPI_v2_2.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/cbinding/VBoxCAPI_v2_2.h
@@ -1303,7 +1303,9 @@ enum AudioDriverType
     AudioDriverType_CoreAudio = 5,
     AudioDriverType_MMPM = 6,
     AudioDriverType_Pulse = 7,
-    AudioDriverType_SolAudio = 8
+    AudioDriverType_SolAudio = 8,
+    AudioDriverType_SDL = 9,
+
 };
 /* End of enum AudioDriverType Declaration */
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/idl/VirtualBox.xidl
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/idl/VirtualBox.xidl
@@ -17362,6 +17362,10 @@ Snapshot 1 (B.vdi)            Snapshot 1
     <const name="SolAudio"      value="8">
         <desc>Solaris audio (Solaris hosts only).</desc>
     </const>
+    <const name="SDL"      value="9">
+        <desc>SDL.</desc>
+    </const>
+     
   </enum>
 
   <enum
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/src-client/ConsoleImpl2.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/src-client/ConsoleImpl2.cpp
@@ -2361,6 +2361,11 @@ int Console::configConstructorInner(PUVM
                     InsertConfigString(pCfg, "AudioDriver", "null");
                     break;
                 }
+		case AudioDriverType_SDL:
+		{
+                    InsertConfigString(pCfg, "AudioDriver", "sdl");
+                    break;
+		}
 #ifdef RT_OS_WINDOWS
 #ifdef VBOX_WITH_WINMM
                 case AudioDriverType_WinMM:
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Main/xml/Settings.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Main/xml/Settings.cpp
@@ -2566,6 +2566,8 @@ void MachineConfigFile::readAudioAdapter
             aa.driverType = AudioDriverType_Pulse;
         else if (strTemp == "OSS")
             aa.driverType = AudioDriverType_OSS;
+        else if (strTemp == "SDL")
+            aa.driverType = AudioDriverType_SDL;
         else if (strTemp == "COREAUDIO")
             aa.driverType = AudioDriverType_CoreAudio;
         else if (strTemp == "MMPM")
@@ -4570,6 +4572,7 @@ void MachineConfigFile::buildHardwareXML
         case AudioDriverType_OSS: pcszDriver = "OSS"; break;
         case AudioDriverType_CoreAudio: pcszDriver = "CoreAudio"; break;
         case AudioDriverType_MMPM: pcszDriver = "MMPM"; break;
+        case AudioDriverType_SDL: pcszDriver = "SDL"; break;
         default: /*case AudioDriverType_Null:*/ pcszDriver = "Null"; break;
     }
     pelmAudio->setAttribute("driver", pcszDriver);
@@ -5240,6 +5243,7 @@ bool MachineConfigFile::isAudioDriverAll
 {
     switch (drv)
     {
+	case AudioDriverType_SDL:
         case AudioDriverType_Null:
 #ifdef RT_OS_WINDOWS
 # ifdef VBOX_WITH_WINMM
@@ -5287,6 +5291,7 @@ bool MachineConfigFile::isAudioDriverAll
 /*static*/
 AudioDriverType_T MachineConfigFile::getHostDefaultAudioDriver()
 {
+    return AudioDriverType_SDL;
 #if defined(RT_OS_WINDOWS)
 # ifdef VBOX_WITH_WINMM
     return AudioDriverType_WinMM;
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Devices/Makefile.kmk
+++ virtualbox-4.3.10-dfsg/src/VBox/Devices/Makefile.kmk
@@ -127,6 +127,7 @@ if !defined(VBOX_ONLY_EXTPACKS)
  ifeq ($(KBUILD_TARGET_ARCH),x86)
   VBoxDD_DEFS.darwin     = VBOX_WITH_2X_4GB_ADDR_SPACE
  endif
+ VBoxDD_SDKS = LIBSDL
  VBoxDD_SOURCES          = \
  	build/VBoxDD.cpp \
 	\
@@ -165,6 +166,7 @@ if !defined(VBOX_ONLY_EXTPACKS)
  	Parallel/DevParallel.cpp \
 	\
  	Audio/audio.c \
+ 	Audio/sdlaudio.c \
  	Audio/audiosniffer.c \
  	Audio/mixeng.c \
  	Audio/noaudio.c \
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Devices/Audio/audio.c
+++ virtualbox-4.3.10-dfsg/src/VBox/Devices/Audio/audio.c
@@ -94,6 +94,7 @@ static struct audio_driver *drvtab[] = {
 #ifdef RT_OS_SOLARIS
     &solaudio_audio_driver,
 #endif
+    &sdl_audio_driver,
     &no_audio_driver
 };
 
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Devices/Audio/audio_int.h
+++ virtualbox-4.3.10-dfsg/src/VBox/Devices/Audio/audio_int.h
@@ -216,6 +216,7 @@ extern struct audio_driver sdl_audio_dri
 extern struct audio_driver wav_audio_driver;
 extern struct audio_driver fmod_audio_driver;
 extern struct audio_driver alsa_audio_driver;
+extern struct audio_driver sdl_audio_driver;
 extern struct audio_driver pulse_audio_driver;
 extern struct audio_driver coreaudio_audio_driver;
 extern struct audio_driver dsound_audio_driver;
--- /dev/null
+++ virtualbox-4.3.10-dfsg/src/VBox/Devices/Audio/sdlaudio.c
@@ -0,0 +1,463 @@
+/*
+ * QEMU SDL audio driver
+ *
+ * Copyright (c) 2004-2005 Vassili Karpov (malc)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+#include <SDL.h>
+#include <SDL_thread.h>
+#include "audio.h"
+#include <signal.h>
+#include <errno.h>
+
+#ifdef VBOX
+#define LOG_GROUP LOG_GROUP_DEV_AUDIO
+#include <VBox/log.h>
+#endif
+
+#include "VBoxDD.h"
+#include "vl_vbox.h"
+#include <iprt/alloc.h>
+
+#ifndef _WIN32
+#ifdef __sun__
+#define _POSIX_PTHREAD_SEMANTICS 1
+#elif defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
+#include <pthread.h>
+#endif
+#endif
+
+#define AUDIO_CAP "sdl"
+#include "audio_int.h"
+
+typedef struct SDLVoiceOut {
+    HWVoiceOut hw;
+    int live;
+    int rpos;
+    int decr;
+} SDLVoiceOut;
+
+static struct {
+    int nb_samples;
+} conf = {
+    INIT_FIELD (nb_samples =) 1024,
+};
+
+static struct SDLAudioState {
+    int exit;
+    SDL_mutex *mutex;
+    SDL_sem *sem;
+    int initialized;
+} glob_sdl;
+typedef struct SDLAudioState SDLAudioState;
+
+static void GCC_FMT_ATTR (1, 2) sdl_logerr (const char *fmt, ...)
+{
+    va_list ap;
+
+    va_start (ap, fmt);
+    AUD_vlog (AUDIO_CAP, fmt, ap);
+    va_end (ap);
+
+    AUD_log (AUDIO_CAP, "Reason: %s\n", SDL_GetError ());
+}
+
+static int sdl_lock (SDLAudioState *s, const char *forfn)
+{
+    if (SDL_LockMutex (s->mutex)) {
+        sdl_logerr ("SDL_LockMutex for %s failed\n", forfn);
+        return -1;
+    }
+    return 0;
+}
+
+static int sdl_unlock (SDLAudioState *s, const char *forfn)
+{
+    if (SDL_UnlockMutex (s->mutex)) {
+        sdl_logerr ("SDL_UnlockMutex for %s failed\n", forfn);
+        return -1;
+    }
+    return 0;
+}
+
+static int sdl_post (SDLAudioState *s, const char *forfn)
+{
+    if (SDL_SemPost (s->sem)) {
+        sdl_logerr ("SDL_SemPost for %s failed\n", forfn);
+        return -1;
+    }
+    return 0;
+}
+
+static int sdl_wait (SDLAudioState *s, const char *forfn)
+{
+    if (SDL_SemWait (s->sem)) {
+        sdl_logerr ("SDL_SemWait for %s failed\n", forfn);
+        return -1;
+    }
+    return 0;
+}
+
+static int sdl_unlock_and_post (SDLAudioState *s, const char *forfn)
+{
+    if (sdl_unlock (s, forfn)) {
+        return -1;
+    }
+
+    return sdl_post (s, forfn);
+}
+
+static int aud_to_sdlfmt (audfmt_e fmt)
+{
+    switch (fmt) {
+    case AUD_FMT_S8:
+        return AUDIO_S8;
+
+    case AUD_FMT_U8:
+        return AUDIO_U8;
+
+    case AUD_FMT_S16:
+        return AUDIO_S16LSB;
+
+    case AUD_FMT_U16:
+        return AUDIO_U16LSB;
+
+    default:
+        dolog ("Internal logic error: Bad audio format %d\n", fmt);
+#ifdef DEBUG_AUDIO
+        abort ();
+#endif
+        return AUDIO_U8;
+    }
+}
+
+static int sdl_to_audfmt(int sdlfmt, audfmt_e *fmt, int *endianness)
+{
+    switch (sdlfmt) {
+    case AUDIO_S8:
+        *endianness = 0;
+        *fmt = AUD_FMT_S8;
+        break;
+
+    case AUDIO_U8:
+        *endianness = 0;
+        *fmt = AUD_FMT_U8;
+        break;
+
+    case AUDIO_S16LSB:
+        *endianness = 0;
+        *fmt = AUD_FMT_S16;
+        break;
+
+    case AUDIO_U16LSB:
+        *endianness = 0;
+        *fmt = AUD_FMT_U16;
+        break;
+
+    default:
+        dolog ("Unrecognized SDL audio format %d\n", sdlfmt);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int sdl_open (SDL_AudioSpec *req, SDL_AudioSpec *obt)
+{
+    int status;
+#ifndef _WIN32
+    int err;
+    sigset_t new, old;
+
+    /* Make sure potential threads created by SDL don't hog signals.  */
+    err = sigfillset (&new);
+    if (err) {
+        dolog ("sdl_open: sigfillset failed: %s\n", strerror (errno));
+        return -1;
+    }
+    err = pthread_sigmask (SIG_BLOCK, &new, &old);
+    if (err) {
+        dolog ("sdl_open: pthread_sigmask failed: %s\n", strerror (err));
+        return -1;
+    }
+#endif
+
+    status = SDL_OpenAudio (req, obt);
+    if (status) {
+        sdl_logerr ("SDL_OpenAudio failed\n");
+    }
+
+#ifndef _WIN32
+    err = pthread_sigmask (SIG_SETMASK, &old, NULL);
+    if (err) {
+        dolog ("sdl_open: pthread_sigmask (restore) failed: %s\n",
+               strerror (errno));
+        /* We have failed to restore original signal mask, all bets are off,
+           so exit the process */
+        exit (EXIT_FAILURE);
+    }
+#endif
+    return status;
+}
+
+static void sdl_close (SDLAudioState *s)
+{
+    if (s->initialized) {
+        sdl_lock (s, "sdl_close");
+        s->exit = 1;
+        sdl_unlock_and_post (s, "sdl_close");
+        SDL_PauseAudio (1);
+        SDL_CloseAudio ();
+        s->initialized = 0;
+    }
+}
+
+static void sdl_callback (void *opaque, Uint8 *buf, int len)
+{
+    SDLVoiceOut *sdl = opaque;
+    SDLAudioState *s = &glob_sdl;
+    HWVoiceOut *hw = &sdl->hw;
+    int samples = len >> hw->info.shift;
+
+    if (s->exit) {
+        return;
+    }
+
+    while (samples) {
+        int to_mix, decr;
+
+        /* dolog ("in callback samples=%d\n", samples); */
+        sdl_wait (s, "sdl_callback");
+        if (s->exit) {
+            return;
+        }
+
+        if (sdl_lock (s, "sdl_callback")) {
+            return;
+        }
+
+        if (audio_bug (AUDIO_FUNC, sdl->live < 0 || sdl->live > hw->samples)) {
+            dolog ("sdl->live=%d hw->samples=%d\n",
+                   sdl->live, hw->samples);
+            return;
+        }
+
+        if (!sdl->live) {
+            goto again;
+        }
+
+        /* dolog ("in callback live=%d\n", live); */
+        to_mix = audio_MIN (samples, sdl->live);
+        decr = to_mix;
+        while (to_mix) {
+            int chunk = audio_MIN (to_mix, hw->samples - hw->rpos);
+            const struct st_sample_t *src = hw->mix_buf + hw->rpos;
+
+            /* dolog ("in callback to_mix %d, chunk %d\n", to_mix, chunk); */
+            hw->clip (buf, src, chunk);
+            sdl->rpos = (sdl->rpos + chunk) % hw->samples;
+            to_mix -= chunk;
+            buf += chunk << hw->info.shift;
+        }
+        samples -= decr;
+        sdl->live -= decr;
+        sdl->decr += decr;
+
+    again:
+        if (sdl_unlock (s, "sdl_callback")) {
+            return;
+        }
+    }
+    /* dolog ("done len=%d\n", len); */
+}
+
+static int sdl_write_out (SWVoiceOut *sw, void *buf, int len)
+{
+    return audio_pcm_sw_write (sw, buf, len);
+}
+
+static int sdl_run_out (HWVoiceOut *hw)
+{
+    int decr, live;
+    SDLVoiceOut *sdl = (SDLVoiceOut *) hw;
+    SDLAudioState *s = &glob_sdl;
+
+    live = audio_pcm_hw_get_live_out (hw);
+    if (!live) {
+        return 0;
+    }
+
+    if (sdl_lock (s, "sdl_run_out")) {
+        return 0;
+    }
+
+    if (sdl->decr > live) {
+        ldebug ("sdl->decr %d live %d sdl->live %d\n",
+                sdl->decr,
+                live,
+                sdl->live);
+    }
+
+    decr = audio_MIN (sdl->decr, live);
+    sdl->decr -= decr;
+
+    sdl->live = live - decr;
+    hw->rpos = sdl->rpos;
+
+    if (sdl->live > 0) {
+        sdl_unlock_and_post (s, "sdl_run_out");
+    }
+    else {
+        sdl_unlock (s, "sdl_run_out");
+    }
+    return decr;
+}
+
+static void sdl_fini_out (HWVoiceOut *hw)
+{
+    (void) hw;
+
+    sdl_close (&glob_sdl);
+}
+
+static int sdl_init_out (HWVoiceOut *hw, audsettings_t *as)
+{
+    SDLVoiceOut *sdl = (SDLVoiceOut *) hw;
+    SDLAudioState *s = &glob_sdl;
+    SDL_AudioSpec req, obt;
+    int endianness;
+    int err;
+    audfmt_e effective_fmt;
+    audsettings_t obt_as;
+
+    req.freq = as->freq;
+    req.format = aud_to_sdlfmt (as->fmt);
+    req.channels = as->nchannels;
+    req.samples = conf.nb_samples;
+    req.callback = sdl_callback;
+    req.userdata = sdl;
+
+    if (sdl_open (&req, &obt)) {
+        return -1;
+    }
+
+    err = sdl_to_audfmt(obt.format, &effective_fmt, &endianness);
+    if (err) {
+        sdl_close (s);
+        return -1;
+    }
+
+    obt_as.freq = obt.freq;
+    obt_as.nchannels = obt.channels;
+    obt_as.fmt = effective_fmt;
+    obt_as.endianness = endianness;
+
+    audio_pcm_init_info (&hw->info, &obt_as);
+    hw->samples = obt.samples;
+
+    s->initialized = 1;
+    s->exit = 0;
+    SDL_PauseAudio (0);
+    return 0;
+}
+
+static int sdl_ctl_out (HWVoiceOut *hw, int cmd, ...)
+{
+    (void) hw;
+
+    switch (cmd) {
+    case VOICE_ENABLE:
+        SDL_PauseAudio (0);
+        break;
+
+    case VOICE_DISABLE:
+        SDL_PauseAudio (1);
+        break;
+    }
+    return 0;
+}
+
+static void *sdl_audio_init (void)
+{
+    SDLAudioState *s = &glob_sdl;
+
+    if (SDL_InitSubSystem (SDL_INIT_AUDIO)) {
+        sdl_logerr ("SDL failed to initialize audio subsystem\n");
+        return NULL;
+    }
+
+    s->mutex = SDL_CreateMutex ();
+    if (!s->mutex) {
+        sdl_logerr ("Failed to create SDL mutex\n");
+        SDL_QuitSubSystem (SDL_INIT_AUDIO);
+        return NULL;
+    }
+
+    s->sem = SDL_CreateSemaphore (0);
+    if (!s->sem) {
+        sdl_logerr ("Failed to create SDL semaphore\n");
+        SDL_DestroyMutex (s->mutex);
+        SDL_QuitSubSystem (SDL_INIT_AUDIO);
+        return NULL;
+    }
+
+    return s;
+}
+
+static void sdl_audio_fini (void *opaque)
+{
+    SDLAudioState *s = opaque;
+    sdl_close (s);
+    SDL_DestroySemaphore (s->sem);
+    SDL_DestroyMutex (s->mutex);
+    SDL_QuitSubSystem (SDL_INIT_AUDIO);
+}
+
+static struct audio_option sdl_options[] = {
+    {
+        INIT_FIELD(name  = )"SAMPLES",
+        INIT_FIELD(tag   = )AUD_OPT_INT,
+        INIT_FIELD(valp  = )&conf.nb_samples,
+        INIT_FIELD(descr = )"Size of SDL buffer in samples"
+    },
+    { NULL, 0, NULL, NULL }
+};
+
+static struct audio_pcm_ops sdl_pcm_ops = {
+    INIT_FIELD(init_out = )sdl_init_out,
+    INIT_FIELD(fini_out = )sdl_fini_out,
+    INIT_FIELD(run_out  = )sdl_run_out,
+    INIT_FIELD(write    = )sdl_write_out,
+    INIT_FIELD(ctl_out  = )sdl_ctl_out,
+};
+
+struct audio_driver sdl_audio_driver = {
+    INIT_FIELD (name           = )"sdl",
+    INIT_FIELD (descr          = )"SDL http://www.libsdl.org",
+    INIT_FIELD (options        = )sdl_options,
+    INIT_FIELD (init           = )sdl_audio_init,
+    INIT_FIELD (fini           = )sdl_audio_fini,
+    INIT_FIELD (pcm_ops        = )&sdl_pcm_ops,
+    INIT_FIELD (can_be_default = )1,
+    INIT_FIELD (max_voices_out = )1,
+    INIT_FIELD (max_voices_in  = )0,
+    INIT_FIELD (voice_size_out = )sizeof (SDLVoiceOut),
+    INIT_FIELD (voice_size_in  = )0
+};
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Frontends/VBoxManage/VBoxManageModifyVM.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Frontends/VBoxManage/VBoxManageModifyVM.cpp
@@ -2045,6 +2045,11 @@ int handleModifyVM(HandlerArg *a)
                     CHECK_ERROR(audioAdapter, COMSETTER(AudioDriver)(AudioDriverType_Null));
                     CHECK_ERROR(audioAdapter, COMSETTER(Enabled)(true));
                 }
+		else if (!RTStrICmp(ValueUnion.psz, "sdl"))
+                {
+                    CHECK_ERROR(audioAdapter, COMSETTER(AudioDriver)(AudioDriverType_SDL));
+                    CHECK_ERROR(audioAdapter, COMSETTER(Enabled)(true));
+                }
 #ifdef RT_OS_WINDOWS
 #ifdef VBOX_WITH_WINMM
                 else if (!RTStrICmp(ValueUnion.psz, "winmm"))
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Frontends/VBoxManage/VBoxManageInfo.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Frontends/VBoxManage/VBoxManageInfo.cpp
@@ -1415,6 +1415,12 @@ HRESULT showVMInfo(ComPtr<IVirtualBox> v
                     else
                         pszDrv = "Null";
                     break;
+		case AudioDriverType_SDL:
+                    if (details == VMINFO_MACHINEREADABLE)
+                        pszDrv = "sdl";
+                    else
+                        pszDrv = "SDL";
+                    break;
                 case AudioDriverType_WinMM:
                     if (details == VMINFO_MACHINEREADABLE)
                         pszDrv = "winmm";
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Frontends/VirtualBox/src/settings/machine/UIMachineSettingsAudio.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Frontends/VirtualBox/src/settings/machine/UIMachineSettingsAudio.cpp
@@ -139,6 +139,7 @@ void UIMachineSettingsAudio::retranslate
     int iIndex = -1;
 
     m_pComboAudioDriver->setItemText(++iIndex, gpConverter->toString(KAudioDriverType_Null));
+    m_pComboAudioDriver->setItemText(++iIndex, gpConverter->toString(KAudioDriverType_SDL));
 
 #ifdef Q_OS_WIN
     m_pComboAudioDriver->setItemText(++iIndex, gpConverter->toString(KAudioDriverType_DirectSound));
@@ -207,6 +208,7 @@ void UIMachineSettingsAudio::prepareComb
     int iIndex = -1;
 
     m_pComboAudioDriver->insertItem(++iIndex, "", KAudioDriverType_Null);
+    m_pComboAudioDriver->insertItem(++iIndex, "", KAudioDriverType_SDL);
 
 #ifdef Q_OS_WIN
     m_pComboAudioDriver->insertItem(++iIndex, "", KAudioDriverType_DirectSound);
--- virtualbox-4.3.10-dfsg.orig/src/VBox/Frontends/VirtualBox/src/converter/UIConverterBackendCOM.cpp
+++ virtualbox-4.3.10-dfsg/src/VBox/Frontends/VirtualBox/src/converter/UIConverterBackendCOM.cpp
@@ -378,6 +378,7 @@ template<> QString toString(const KAudio
     switch (type)
     {
         case KAudioDriverType_Null:        return QApplication::translate("VBoxGlobal", "Null Audio Driver", "AudioDriverType");
+        case KAudioDriverType_SDL:         return QApplication::translate("VBoxGlobal", "SDL Audio Driver", "AudioDriverType");
         case KAudioDriverType_WinMM:       return QApplication::translate("VBoxGlobal", "Windows Multimedia", "AudioDriverType");
         case KAudioDriverType_OSS:         return QApplication::translate("VBoxGlobal", "OSS Audio Driver", "AudioDriverType");
         case KAudioDriverType_ALSA:        return QApplication::translate("VBoxGlobal", "ALSA Audio Driver", "AudioDriverType");
@@ -542,6 +543,7 @@ template<> KAudioDriverType fromString<K
 {
     QHash<QString, KAudioDriverType> list;
     list.insert(QApplication::translate("VBoxGlobal", "Null Audio Driver", "AudioDriverType"),   KAudioDriverType_Null);
+    list.insert(QApplication::translate("VBoxGlobal", "SDL Audio Driver", "AudioDriverType"),   KAudioDriverType_SDL);
     list.insert(QApplication::translate("VBoxGlobal", "Windows Multimedia", "AudioDriverType"),  KAudioDriverType_WinMM);
     list.insert(QApplication::translate("VBoxGlobal", "OSS Audio Driver", "AudioDriverType"),    KAudioDriverType_OSS);
     list.insert(QApplication::translate("VBoxGlobal", "ALSA Audio Driver", "AudioDriverType"),   KAudioDriverType_ALSA);
